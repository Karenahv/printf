.TH Man 3 " 30 July 2019" "HOLBERTON SCHOOL" "_PRINTF"
.SH NAME
.B _printf
- formatted output conversion
.SH SYNOPSIS
.B #include "our file"
.sp
.BI "include "our file"
.sp
.ad
.SH DESCRIPTION.
The function _printf is a variadic function that produces a string according to a
I format
and prints it to the standard output, much like the c standard library function printf. 
It can receive a varibale number of arguments. THe arguments that printf functions are:
.I %d
.I c
.I s
.I u
.I x
.I X
.I o
.I R
.sp
.B Return value
.sp
ON succes, _printf returns the numbers of characters printed. If
.I format
is NULL or if the functions encounters any arrores, it returns -1
.SH OPTIONS
.B FUNCTIONS IN PRINTF
.IP t_char
print a character
.IP t_string
print a string
.IP print_number
entry point
.IP _printf(const char *format, ...)
print output according to speciefied format
.B FUNCTIONS IN HOLBERTON.H
.IP int _putchar(char c)
prototype for putchar
.IP Int strlen(char *s)
prototype for lenght string
.IP print_number(va_list va)
prototype for print numbers
.IP int binary(va_list va)
prototype for converti integer  to binary
.IP int print_unsigned(va_list va)
prototype for print unsigned int
.IP Int hexa(va_list va)
prototype for hexadecimals
.IP hexa_upper(va_list va)
prototype for  print hexadecimals  for caps letter
.IP int octal(va_list va)
prototype for print octal nums
.RS
.B SPECIAL TEST
len = _printf("Let's try to printf a simple sentence.\n")
len2 = printf("Let's try to printf a simple sentence.\n")
_printf("Character:[%c]\n", 'H')
printf("Character:[%c]\n", 'H')
_printf("String:[%s]\n", "I am a string !")
printf("String:[%s]\n", "I am a string !")
_printf("String:[%s]\n", "")
printf("String:[%s]\n", "")
_printf("Length:[%d, %i]\n", len, len)
printf("Length:[%d, %i]\n", len2, len2)
_printf("Negative:[%d]\n", -762534)
printf("Negative:[%d]\n", -762534)
_printf("%b\n", 98)
char c = 'z'
int alen, elen
.B **CHAR** 
printf("Expected   : %c\n", 'a')
_printf("Actual     : %c\n", 'a')
elen = printf("Expected   : %c\n", c)
alen = _printf("Actual     : %c\n", c)
printf("Expected   : %i\n", elen)
_printf("Actual     : %i\n", alen)
printf("Expected   : %cc\n", 'a')
_printf("Actual     : %cc\n", 'a')
printf("Expected   : %c\n", 53)
_printf("Actual     : %c\n", 53)
printf("Expected   : %c\n", '\0')
_printf("Actual     : %c\n", '\0')
printf("Expected   : %%%c\n", 'y')
_printf("Actual     : %%%c\n", 'y')
.B **STRINGS**
char *str = "hello, world"
alen = elen = 0
printf("Expected   : %world\n")
printf("Actual     : %world\n")
printf("Expected   : %s\n", "holberton")
_printf("Actual     : %s\n", "holberton")
printf("Expected   : %s$\n", "")
_printf("Actual     : %s$\n", "")
elen = printf("Expected   : %s\n", str)
alen = _printf("Actual     : %s\n", str)
printf("Expected   : %i\n", elen)
_printf("Actual     : %i\n", alen)
printf("Expected   : %sschool\n", "holberton")
_printf("Actual     : %sschool\n", "holberton")
printf("Expected   : %s$\n", NULL)
_printf("Actual     : %s$\n", NULL)
_printf("%s%c%c%c%s%%%s%c", "Loading ", '.', '.', '.', " 99", " Please wait", '\n')
elen =  _printf("%!\n")
alen =  _printf("%K\n")
printf("%d %d", elen, alen)
elen =  printf("%!\n")
alen =  printf("%K\n")
printf("%d %d", elen, alen)
alen = elen = 0
.B **PERCENT**
elen = printf("Expected   : %%\n")
alen = _printf("Actual     : %%\n")
printf("Expected   : %i\n", alen)
_printf("Actual     : %i\n", elen)
elen = printf("Expected   : %%%%\n")
alen = _printf("Actual     : %%%%\n")
printf("Expected   : %i\n", elen)
_printf("Actual     : %i\n", alen)
printf("Expected   :")
printf("%")
_printf("\n")
printf("Actual     :")
_printf("%")
.B BINARY**
int b = 4312
printf("Expected   : %i\n", 1111011)
_printf("Actual     : %b\n", 123)
elen = printf("Expected   : %lu\n", 1000011011000)
alen = _printf("Actual     : %b\n", b)
printf("Expected   : %i\n", elen)
_printf("Actual     : %i\n", alen)
printf("Expected   : %i\n", 0)
_printf("Actual     : %b\n", 0)
.B **BINARY**
int b = 4312
printf("Expected   : %i\n", 1111011)
_printf("Actual     : %b\n", 123)
elen = printf("Expected   : %lu\n", 1000011011000)
alen = _printf("Actual     : %b\n", b)
printf("Expected   : %i\n", elen)
_printf("Actual     : %i\n", alen)
printf("Expected   : %i\n", 0)
_printf("Actual     : %b\n", 0)
.B **DECIMAL**
alen = elen = 0;
p = 1134001;
n = -4567;
z = 0;
elen = printf("Expected   : %d\n", p)
alen = _printf("Actual     : %d\n", p)
printf("Expected   : %d\n", elen)
_printf("Actual     : %d\n", alen)
elen = printf("Expected   : %d\n", n)
alen = _printf("Actual     : %d\n", n)
printf("Expected   : %d\n", elen)
_printf("Actual     : %d\n", alen)
elen = printf("Expected   : %i\n", z)
alen = _printf("Actual     : %i\n", z)
printf("Expected   : %i\n", elen)
_printf("Actual     : %i\n", alen)
printf("Expected   : %d\n", INT_MAX)
_printf("Actual     : %d\n", INT_MAX)
printf("Expected   : %d\n", INT_MIN)
_printf("Actual     : %d\n", INT_MIN)
.B **UNSIGNED**
unsigned int uelen = 0
unsigned int ualen = 0
unsigned int m = 113342421
z = 0
elen = printf("Expected   : %u\n", m)
alen = _printf("Actual     : %u\n", m)
printf("Expected   : %u\n", elen);
alen = _printf("Actual     : %i\n", z)
printf("Expected   : %i\n", elen)
_printf("Actual     : %i\n", alen)
printf("Expected   : %d\n", INT_MAX)
_printf("Actual     : %d\n", INT_MAX)
printf("Expected   : %d\n", INT_MIN)
_printf("Actual     : %d\n", INT_MIN)
unsigned int uelen = 0
unsigned int ualen = 0
unsigned int m = 113342421
z = 0
elen = printf("Expected   : %u\n", m)
alen = _printf("Actual     : %u\n", m)
printf("Expected   : %u\n", elen)
_printf("Actual     : %u\n", alen)
uelen = printf("Expected   : %u\n", z)
ualen = _printf("Actual     : %u\n", z)
printf("Expected   : %u\n", uelen)
_printf("Actual     : %u\n", ualen)
printf("Expected   : %u\n", z)
_printf("Actual     : %u\n", z)
printf("Expected   : %u\n", -5)
_printf("Actual     : %u\n", -5)
printf("Expected   : %u\n", UINT_MAX)
_printf("Actual     : %u\n", UINT_MAX)
printf("Expected   : %u\n", INT_MAX)
_printf("Actual     : %u\n", INT_MAX)
printf("Expected   : %u\n", 1)
_printf("Actual     : %u\n", 1)
printf("Expected   : %u\n", INT_MIN)
_printf("Actual     : %u\n", INT_MIN)
.B **HEXA**
printf("Expected   : %x\n", 995)
_printf("Actual     : %x\n", 995)
alen = printf("Expected   : %x\n", -1)
elen = _printf("Actual     : %x\n", -1)
printf("Expected   : %i\n", alen)
_printf("Actual     : %i\n", elen)
alen = printf("Expected   : %x\n", 0)
elen = _printf("Actual     : %x\n", 0)
printf("Expected   : %x\n", alen)
_printf("Actual     : %x\n", elen)
printf("Expected   : %x\n", 1)
_printf("Actual     : %x\n", 1)
elen = printf("Expected   : %x\n", h)
alen = _printf("Actual     : %x\n", h)
printf("Expected   : %i\n", elen)
_printf("Actual     : %i\n", alen)
printf("Expected   : %x\n", INT_MAX)
_printf("Actual     : %x\n", INT_MAX)
printf("Expected   : %x\n", INT_MIN)
_printf("Actual     : %x\n", INT_MIN)
printf("Expected   : %x\n", 0)
_printf("Actual     : %x\n", 0)
printf("Expected   : %u, %i, %c, %d, %s\n", INT_MIN, 324, 'g', 32, "hello")
_printf("Expected   : %u, %i, %c, %d, %s\n", INT_MIN, 324, 'g', 32, "hello")
.B **HEXA_BIG**
printf("Expected   : %X\n", h)
_printf("Actual     : %X\n", h)
printf("Expected   : %X\n", -1)
_printf("Actual     : %X\n", -1)
elen = printf("Expected   : %X\n", 0)
alen = _printf("Actual     : %X\n", 0)
printf("Expected   : %i\n", elen)
_printf("Actual     : %i\n", alen)
printf("Expected   : %X\n", UINT_MAX)
_printf("Actual     : %X\n", UINT_MAX)
printf("Expected   : %X\n", INT_MIN)
_printf("Actual     : %X\n", INT_MIN)
alen = printf("Expected   : %X\n", 0)
elen = _printf("Actual     : %X\n", 0)
printf("Expected   : %X\n", alen)
_printf("Actual     : %X\n", elen)
.B **OCTAL**
printf("Expected   : %o\n", 2288)
_printf("Actual     : %o\n", 2288)
printf("Expected   : %o\n", -991)
_printf("Actual     : %o\n", -991)
elen = printf("Expected   : %o\n", h)
alen = _printf("Actual     : %o\n", h)
printf("Expected   : %o\n", elen)
_printf("Actual     : %o\n", alen)
printf("Expected   : %o\n", INT_MAX)
_printf("Actual     : %o\n", INT_MAX)
printf("Expected   : %o\n", INT_MIN)
_printf("Actual     : %o\n", INT_MIN)
printf("Expected   : %o\n", 0)
_printf("Actual     : %o\n", 0)
.RE
.SH NOTES
_printf  uses a custom character printing function called _putchar, that uses the system call write().
_putchar uses a static buffer of 1024 bytes and static incrementing variable.
That way, everytime _putchar is called inside _printf,  the caracter is stored inside the buffer and the function moves t the nex character, until _printf calls _putchar(-1).
.SH BUGS
Some specials cases can't working 
.SH AUTHORS
.pp
Karen Herrera  and Carlos Alvarez, Cohort 9
.pp